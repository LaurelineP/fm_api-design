// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // prisma can use multiple DBMS --> hence the specification
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  username  String   @unique
  password  String

  // related field
  products Products[]
}

model Products {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  name          String   @db.VarChar(255)
  // defining the relationship
  // - one to one ?
  // - one to many ?
  // One user can have a product but one project can't belong to more than one user 
  // so this is a one to one relation
  belongs_to_id String
  // @relation( fields: [<this.model.field(s)>], references:[<related model's field(s)>])
  // ensure this relationship is done in the other table by running: npx prisma format which adds the Products for your in Users
  // ensure to have lowercase fields Products > products
  belongs_to    Users    @relation(fields: [belongs_to_id], references: [id])

  // related field
  updates Updates[]
}

enum UPDATE_STATUS {
  IN_PROGRESS
  SHIPPED
  DEPRECATED
}

// FE needs to have Updates resources
model Updates {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updated   DateTime
  name      String        @db.VarChar(255)
  body      String
  status    UPDATE_STATUS @default(IN_PROGRESS)
  version   String?
  asset     String?

  // related field
  product_id String
  product    Products @relation(fields: [product_id], references: [id])

  // related field
  update_points Update_Points[]
}

// FE needs to have Update Point resource
model Update_Points {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  updated     DateTime
  name        String   @db.VarChar(255)
  description String

  // related to Updates;
  update_id String
  update    Updates @relation(fields: [update_id], references: [id])
}
